service: docs-site

provider:
  name: aws
  stage: dev
  region: eu-west-2
  environment:
    S3_BUCKET_NAME: ${self:custom.bucketName}
  stackTags:
    Name: ${self:service}
    Description: A simple static site for documentation
    Owner: ${self:custom.tags.owner}
    OwnerFunction: ${self:custom.tags.ownerFunction}

plugins:
  - serverless-offline

custom:
  bucketName: ${self:provider.stage}-docs-site-${self:provider.region}
  tags:
    owner: ${env:OWNER,'N/A'}
    ownerFunction: ${env:OWNER_FUNCTION,'N/A'}
  serverless-offline:
    httpPort: 3001
    
resources:
  Resources:
    DocsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: dev-docs-site-eu-west-2
    DocsS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref DocsS3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::dev-docs-site-eu-west-2/*"
              Principal: "*"
          
functions:

  getContent:
    handler: src/handler.getContent
    events:
      - http:
          path: pages/{filePath*} # Single function handles everything
          method: get
          cors: true

  uploadMarkdown:
    handler: src/handler.uploadMarkdown
    events:
      - http:
          path: upload
          method: post
          cors: true